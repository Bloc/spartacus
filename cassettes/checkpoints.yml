---
http_interactions:
- request:
    method: get
    uri: http://localhost:3000/api/v1/checkpoints/1
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json; charset=utf-8
      Etag:
      - '"67ef082b2c11d7439fda872589a3235b"'
      Cache-Control:
      - max-age=0, private, must-revalidate
      X-Meta-Request-Version:
      - 0.3.4
      X-Request-Id:
      - 17cee9da-faed-4c74-b9fb-7c16b08c74b5
      X-Runtime:
      - '0.280414'
      Vary:
      - Accept-Encoding
      Transfer-Encoding:
      - chunked
    body:
      encoding: UTF-8
      string: '{"id":1,"name":"Command Line","body":"As a programmer, you''ll spend
        a lot of your time on the command line in your terminal. The commands you
        use will depend on your operating system. If you use OS X or Linux, you''ll
        be entering Unix commands. If you use Windows, you''ll be entering MS-DOS
        commands. Proficiency with Unix and MS-DOS commands in a terminal contributes
        to proficiency in programming, so it''s important to practice these. This
        screencast leads you through some basic commands.\r\n\r\n\u003ccenter\u003e\r\n\u003cvideo
        width=\"853\" height=\"505\" controls\u003e \u003csource src=\"https://bloc-global-assets.s3.amazonaws.com/screencasts/Command%20Line.mp4\"
        type=\"video/mp4\"\u003e \r\n\u003c/video\u003e\r\n\u003c/center\u003e\r\n\r\n###
        Snippets from the Screencast\r\n\r\n### OS X\r\n\r\n```bash\r\n# Working with
        directories: (OS X)\r\n\r\n$ pwd         #=\u003e print working directory\r\n$
        ls          #=\u003e list all subdirectories in the current directory\r\n$
        ls -l       #=\u003e more details on our listed directories\r\n$ mkdir code  #=\u003e
        make a directory named code\r\n$ cd code     #=\u003e change directories to
        code\r\n$ pwd         #=\u003e validate that you are now in the code directory\r\n$
        cd ..       #=\u003e move up one level in the directory chain\r\n$ cd code     #=\u003e
        change back to the code directory\r\n$ open .      #=\u003e open the finder
        window for the current directory\r\n$ man mkdir   #=\u003e open the manual
        for the mkdir command\r\n$ q           #=\u003e exit out of the manual\r\n```\r\n\r\n```bash\r\n#
        man mkdir output (OS X)\r\n\r\nNAME\r\n     mkdir -- make directories\r\n\r\nSYNOPSIS\r\n     mkdir
        [-pv] [-m mode] directory_name ...\r\n\r\nDESCRIPTION\r\n     The mkdir utility
        creates the directories named as operands, in the order specified, using mode
        rwxrwxrwx (0777)...\r\n```\r\n\r\n```bash\r\n# Working with files: (OS X)\r\n\r\n$
        touch snippets.rb                       #=\u003e create a new file in the
        code directory, named snippets.rb\r\n$ ls -l                                   #=\u003e
        validate that snippets.rb was created\r\n$ cat snippets.rb                         #=\u003e
        view snippets.rb contents\r\n$ echo hello world                        #=\u003e
        print something\r\n$ echo puts \\\"hello world\\\" \u003e snippets.rb #=\u003e
        add puts hello\r\n$ cat snippets.rb                         #=\u003e view
        snippets.rb contents\r\n$ cp snippets.rb hello.rb                 #=\u003e
        make a copy of snippets, named hello\r\n$ mv hello.rb helloworld.rb               #=\u003e
        rename hello to helloworld\r\n$ rm helloworld.rb                        #=\u003e
        delete helloworld\r\n$ ls -l                                   #=\u003e view
        the contents of the code directory\r\n$ grep hello snippets.rb                  #=\u003e
        search the snippets file for the hello string\r\n$ cd ..                                   #=\u003e
        move up one level\r\n$ grep -r e code                          #=\u003e search
        the code directory for any file that has an \"e\" in it\r\n```\r\n\r\n```\r\n#
        Recursive option for working with directories\r\n\r\n$ mkdir temp         #=\u003e
        make a temp directory\r\n$ cp temp temp2      #=\u003e try to make a copy
        of temp, named temp2 (won''t work)\r\n$ rm temp            #=\u003e try to
        delete temp (won''t work)\r\n$ cp -r temp temp2   #=\u003e make a copy of
        temp, named temp2 (recursively)\r\n$ rm -r temp2        #=\u003e delete temp2
        (recursively)\r\n$ ls -l              #=\u003e view the contents of the temp
        directory\r\n```\r\n\r\n### Windows\r\n\r\n```\r\n# Working with directories:
        (Windows)\r\n\r\n$ cd          #=\u003e prints working directory (or chdir)\r\n$
        dir /b      #=\u003e show all subdirectories in the current directory (just
        directory name)\r\n$ dir         #=\u003e more details on our listed directories
        (/p seperates into pages)\r\n$ md code     #=\u003e make a directory named
        code (or mkdir)\r\n$ cd code     #=\u003e change directories to code\r\n$
        cd          #=\u003e validate that you are now in the code directory\r\n$
        cd ..       #=\u003e move up one level in the directory chain\r\n$ cd code     #=\u003e
        change back to the code directory\r\n$ start .     #=\u003e starts a windows
        explorer window for the current directory\r\n$ help md     #=\u003e get help
        info for the mkdir command (or mkdir)\r\n```\r\n\r\n```\r\n# help md (Windows)\r\n\r\nNAME\r\n     md
        -- make directories\r\n\r\nCreates a directory.\r\n\r\nMKDIR [drive:]path\r\nMD
        [drive:]path\r\n```\r\n\r\n```\r\n# Working with files: (Windows)\r\n\r\n$
        cd. \u003e snippets.rb                       #=\u003e create a new file in
        the code directory, named snippets.rb\r\n$ dir                                     #=\u003e
        validate that snippets.rb was created\r\n$ type snippets.rb                        #=\u003e
        display snippets.rb contents\r\n$ echo hello world                        #=\u003e
        print something\r\n$ echo puts \\\"hello world\\\" \u003e snippets.rb #=\u003e
        add puts hello\r\n$ type snippets.rb                        #=\u003e display
        snippets.rb contents\r\n$ copy snippets.rb hello.rb               #=\u003e
        make a copy of snippets, named hello\r\n$ rename hello.rb helloworld.rb           #=\u003e
        rename hello to helloworld\r\n$ del helloworld.rb                       #=\u003e
        delete helloworld\r\n$ dir                                     #=\u003e view
        the contents of the code directory\r\n$ find \"hello\" snippets.rb                #=\u003e
        search the snippets file for the hello string\r\n$ findstr /s /i e code                    #=\u003e
        search the current directory for any file that has an \"e\" in it\r\n```\r\n\r\n```\r\n#
        Recursive option for working with directories (Windows)\r\n\r\n$ md temp              #=\u003e
        make a temp directory\r\n$ xcopy temp temp2     #=\u003e try to make a copy
        of temp, named temp2 (won''t work b/c temp is empty)\r\n$ xcopy /e temp temp2  #=\u003e
        make an empty copy of temp, named temp2\r\n$ dir                  #=\u003e
        validate that temp2 was created\r\n$ rd temp2             #=\u003e remove
        temp2 directory\r\n$ cd temp              #=\u003e change to the temp directory\r\n$
        cd. \u003e test.txt       #=\u003e create a test file in the temp directory,
        named test.txt\r\n$ cd ..                #=\u003e move up one level\r\n$ xcopy
        temp temp2     #=\u003e make a copy of temp, named temp2 (works because it''s
        not empty)\r\n$ dir                  #=\u003e validate that temp2 was created\r\n$
        rd temp2             #=\u003e try to delete temp (won''t work because temp2
        is not empty)\r\n$ rd temp2 /s          #=\u003e delete temp2 (recursively)\r\n$
        dir                  #=\u003e view the contents of the directory\r\n```\r\n\r\n###
        Resources\r\n* [Zed Shaw](http://zedshaw.com/#/start) writes a series of programming
        ebooks. His [Command Line - Learn Code the Hard Way](http://cli.learncodethehardway.org/)
        is a great resource for strengthening your CLI skills.\r\n* This is a [comprehensive
        index of OS X terminal commands](http://ss64.com/osx/).\r\n* This is a [comprehensive
        index of Windows terminal commands](http://ss64.com/nt/).\r\n* This [Basic
        Unix Tutorial](http://snap.nlc.dcccd.edu/learn/idaho/unixindex.html) was created
        by Idaho State University, and serves as a nice reference guide.\r\n* Here''s
        some [more detail on grep](http://www.panix.com/~elflord/unix/grep.html).
        Once you get proficient with grep options, you''ll find it much faster than
        searching in your GUI.","parent_id":9,"created_at":"2012-11-25T22:55:59.365-05:00","updated_at":"2015-05-13T13:20:03.314-04:00","assignment":"Create
        your own code directory, similar to the one in the screencast. Create files
        for some of the Ruby exercises you completed. Name your files in accordance
        with the exercise, and use a `.rb` extension. To seed the content of the files,
        you can open them outside of the terminal and paste the code in. Once you
        have a code directory filled with a handful of `.rb` files, try copying them,
        renaming them and searching them. Make sure to experiment with different options
        for each command as well. When you have a better feel for the command line,
        delete all of the copies you made, leaving only the original `.rb` files you
        created.\r\n\r\nAfter you''ve completed the tasks above, copy your entire
        terminal session text and send it to your mentor. (If you already have a Github
        account, you can paste it in a new Gist and send the link to your mentor.
        If you don''t have a Github account, we''ll create one in the next checkpoint.)","summary":null,"points":1,"project_name":"","roadmap_id":1,"active":true,"job_prep":false,"version":[0,0],"body_file_path":"","uuid":"337340a0-cc2c-43bd-86c1-d8387487d58c","ref":"337340a0-cc2c-43bd-86c1-d8387487d58c|0","retroactive_optional_date":null}'
    http_version: 
  recorded_at: Thu, 08 Oct 2015 05:13:00 GMT
- request:
    method: get
    uri: http://localhost:3000/api/v1/checkpoints/-1
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 404
      message: Not Found
    headers:
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json; charset=utf-8
      Cache-Control:
      - no-cache
      X-Meta-Request-Version:
      - 0.3.4
      X-Request-Id:
      - d3e429eb-5105-4ade-93d1-65b1836893c7
      X-Runtime:
      - '0.225733'
      Vary:
      - Accept-Encoding
      Transfer-Encoding:
      - chunked
    body:
      encoding: UTF-8
      string: '{"message":"Resource not found"}'
    http_version: 
  recorded_at: Thu, 08 Oct 2015 05:13:00 GMT
- request:
    method: put
    uri: http://localhost:3000/api/v1/checkpoints/2
    body:
      encoding: UTF-8
      string: checkpoint[name]=My%20Checkpoint
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json; charset=utf-8
      Etag:
      - '"f4e8bab8402f056716ba3f174d6db83c"'
      Cache-Control:
      - max-age=0, private, must-revalidate
      X-Meta-Request-Version:
      - 0.3.4
      X-Request-Id:
      - f66b4590-0498-402e-b409-fb944b3ddf00
      X-Runtime:
      - '0.239184'
      Vary:
      - Accept-Encoding
      Transfer-Encoding:
      - chunked
    body:
      encoding: UTF-8
      string: '{"id":2,"name":"My Checkpoint","body":"Before you build an application,
        you must have an idea of what it should look like and how it will be interpreted
        by users. Developers often use **wireframes** to illustrate their application
        before they start coding. When drafting a wireframe, think about the primary
        purpose of your application. Why should it exist? How will it make someone''s
        life better? Wireframes **should not** be complicated. They should be highly
        general, but still provide a context for the application throughout development.\r\n\r\nThere
        are dozens of wireframing tools, but pencil and paper is our preference. It
        is often tempting to incorporate all of the features that your application
        could have in a wireframe. Don''t get distracted though, and err on the side
        of simplicity. Reduce the number of pages and features that your site must
        have to the absolute minimum. You''ll know when you''ve reached the minimally
        viable product, (aka MVP), because if you were to remove one more thing, the
        product would cease to make sense.  \r\n \r\n### Resources\r\n* [The Boxing
        Glove Technique](http://www.90percentofeverything.com/2008/01/02/the-boxing-glove-wireframing-technique/)
        is an interesting method to help keep your wireframes simple.\r\n* Learn how
        [37signals does HTML Prototyping](http://blog.handcraft.com/2010/07/how-37signals-does-html-prototyping/).\r\n*
        If you want to use a tool to build wireframes [Balsamiq](http://www.balsamiq.com/products/mockups)
        has a free trial license. It''s a nice wireframing tool, but remember that
        pencil and paper are perfectly fine. ","parent_id":43,"created_at":"2012-11-25T22:55:59.504-05:00","updated_at":"2015-10-08T01:09:05.231-04:00","assignment":"Draft
        a wireframe for your Blog application. Create the individual pages, as well
        as the user flow. To illustrate user flow, create a diagram that describes
        how a user goes through the different pages of your application. When you
        think you have a good wireframe drafted, push it to Github.\r\n\r\nWe can''t
        stress this enough: **err on the side of simplicity**. The goal is to get
        an idea of all the pages you''ll need to make a useful app, and how they work
        together.","summary":null,"points":1,"project_name":"","roadmap_id":1,"active":true,"job_prep":false,"version":[0,0],"body_file_path":"","uuid":"479dbf5e-6d01-44e9-bd77-655a0fabaf48","ref":"479dbf5e-6d01-44e9-bd77-655a0fabaf48|0","retroactive_optional_date":null}'
    http_version: 
  recorded_at: Thu, 08 Oct 2015 05:13:01 GMT
- request:
    method: put
    uri: http://localhost:3000/api/v1/checkpoints/3
    body:
      encoding: UTF-8
      string: checkpoint[name]=My%20Checkpoint&checkpoint[summary]=Great%20Summary&checkpoint[body]=Really%20great%20checkpoint&checkpoint[assignment]=Do%20the%20work%20well&checkpoint[points]=5
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json; charset=utf-8
      Etag:
      - '"dd9b8cb21292c772e8df299d6f72545f"'
      Cache-Control:
      - max-age=0, private, must-revalidate
      X-Meta-Request-Version:
      - 0.3.4
      X-Request-Id:
      - f678ea37-741c-4086-9deb-2bc4cea62ac9
      X-Runtime:
      - '0.406227'
      Vary:
      - Accept-Encoding
      Transfer-Encoding:
      - chunked
    body:
      encoding: UTF-8
      string: '{"id":3,"name":"My Checkpoint","body":"Really great checkpoint","parent_id":7,"created_at":"2012-11-25T22:55:59.522-05:00","updated_at":"2015-10-08T01:09:05.852-04:00","assignment":"Do
        the work well","summary":"Great Summary","points":5,"project_name":"","roadmap_id":1,"active":true,"job_prep":false,"version":[0,0],"body_file_path":"","uuid":"cdaa8f1f-f165-48ad-997b-b3c875c22a2b","ref":"cdaa8f1f-f165-48ad-997b-b3c875c22a2b|0","retroactive_optional_date":null}'
    http_version: 
  recorded_at: Thu, 08 Oct 2015 05:13:02 GMT
- request:
    method: put
    uri: http://localhost:3000/api/v1/checkpoints/-1
    body:
      encoding: UTF-8
      string: checkpoint[name]=My%20Checkpoint
    headers: {}
  response:
    status:
      code: 404
      message: Not Found
    headers:
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json; charset=utf-8
      Cache-Control:
      - no-cache
      X-Meta-Request-Version:
      - 0.3.4
      X-Request-Id:
      - d8027568-9e19-4a24-91db-ec556ddd7853
      X-Runtime:
      - '0.232196'
      Vary:
      - Accept-Encoding
      Transfer-Encoding:
      - chunked
    body:
      encoding: UTF-8
      string: '{"message":"Resource not found"}'
    http_version: 
  recorded_at: Thu, 08 Oct 2015 05:13:02 GMT
- request:
    method: delete
    uri: http://localhost:3000/api/v1/checkpoints/1
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 404
      message: Not Found
    headers:
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json; charset=utf-8
      Cache-Control:
      - no-cache
      X-Meta-Request-Version:
      - 0.3.4
      X-Request-Id:
      - e0372469-f709-496f-a344-39930f602ed4
      X-Runtime:
      - '0.255790'
      Vary:
      - Accept-Encoding
      Transfer-Encoding:
      - chunked
    body:
      encoding: UTF-8
      string: '{"message":"Resource not found"}'
    http_version: 
  recorded_at: Thu, 08 Oct 2015 05:13:03 GMT
- request:
    method: delete
    uri: http://localhost:3000/api/v1/checkpoints/-1
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 404
      message: Not Found
    headers:
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json; charset=utf-8
      Cache-Control:
      - no-cache
      X-Meta-Request-Version:
      - 0.3.4
      X-Request-Id:
      - 252d6db8-781f-41a3-9d21-984d1859320a
      X-Runtime:
      - '0.290977'
      Vary:
      - Accept-Encoding
      Transfer-Encoding:
      - chunked
    body:
      encoding: UTF-8
      string: '{"message":"Resource not found"}'
    http_version: 
  recorded_at: Thu, 08 Oct 2015 05:13:03 GMT
recorded_with: VCR 2.9.3
